version: '3.8'

# Production Docker Compose configuration
services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: capstone-db-prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - capstone-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Spring Boot Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: capstone-backend-prod
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      JAVA_OPTS: "-Xms1g -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - capstone-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data

  # React Frontend with Nginx
  frontend:
    build:
      context: ./src/main/capstone-ui
      dockerfile: Dockerfile
    container_name: capstone-frontend-prod
    environment:
      REACT_APP_API_BASE_URL: ${FRONTEND_API_URL}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - capstone-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./ssl:/etc/nginx/ssl:ro

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: capstone-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - capstone-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (if scaling backend)
  nginx:
    image: nginx:alpine
    container_name: capstone-nginx-lb
    ports:
      - "8080:80"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    networks:
      - capstone-network
    restart: always

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  capstone-network:
    driver: bridge
