version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: capstone-db-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-capstone_db}
      POSTGRES_USER: ${DB_USER:-capstone_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-capstone_password}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - capstone-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-capstone_user} -d ${DB_NAME:-capstone_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Spring Boot Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: capstone-backend-prod
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/${DB_NAME:-capstone_db}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-capstone_user}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-capstone_password}
      JWT_SECRET: ${JWT_SECRET:-mySecretKey123456789}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400}
      JAVA_OPTS: "-Xms512m -Xmx1024m -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - capstone-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    volumes:
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 512M

  # React Frontend with Nginx
  frontend:
    build:
      context: ./src/main/capstone-ui
      dockerfile: Dockerfile
    container_name: capstone-frontend-prod
    environment:
      REACT_APP_API_BASE_URL: ${FRONTEND_API_URL:-http://localhost:8080/api}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - capstone-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: capstone-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data_prod:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - capstone-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy (Optional for production)
  nginx-proxy:
    image: nginx:alpine
    container_name: capstone-nginx-proxy
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      # - /path/to/ssl/certs:/etc/nginx/ssl:ro  # Uncomment for SSL
    ports:
      - "443:443"  # HTTPS
      - "80:80"     # HTTP redirect
    depends_on:
      - frontend
      - backend
    networks:
      - capstone-network-prod
    restart: unless-stopped
    profiles:
      - proxy  # Only start with --profile proxy

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  capstone-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
